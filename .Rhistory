vector<lower=0,upper=1>[N1] Y1;
vector[N0] bed0;
vector[N0] occ0;
vector[N0] alos0;
vector[N0] dnr0;
vector[N0] bnr0;
vector[N0] oir0;
vector[N0] pop0;
vector[N0] urban0;
vector[N0] HHI_beds0;
vector[N0] gdp0;
vector[N1] bed1;
vector[N1] occ1;
vector[N1] alos1;
vector[N1] dnr1;
vector[N1] bnr1;
vector[N1] oir1;
vector[N1] pop1;
vector[N1] urban1;
vector[N1] HHI_beds1;
vector[N1] gdp1;
}
parameters{
real b0;
real b1;
real b2;
real b3;
real b4;
real b5;
real b6;
real b7;
real b8;
real b9;
real b10;
real<lower=0> sigma;
}
model{
Y0 ~ normal( b0 + b1*bed0 + b2*occ0 + b3*alos0 + b4*dnr0 + b5*bnr0 + b6*oir0 + b7*pop0 + b8*urban0 + b9*HHI_beds0 + b10*gdp0, sigma);
target += normal_lccdf( Y1 | b1*bed1 + b2*occ1 + b3*alos1 + b4*dnr1 + b5*bnr1 + b6*oir1 + b7*pop1 + b8*urban1 + b9*HHI_beds1 + b10*gdp1, sigma );
//PRIORS
b0 ~ normal(0, 10);
b1 ~ normal(0, 10);
b2 ~ normal(0, 10);
b3 ~ normal(0, 10);
b4 ~ normal(0, 10);
b5 ~ normal(0, 10);
b6 ~ normal(0, 10);
b7 ~ normal(0, 10);
b8 ~ normal(0, 10);
b9 ~ normal(0, 10);
b10 ~ normal(0, 10);
sigma ~ gamma(1, 1)
}
'
rats_fit <- stan(model_code=tobitstan, model_name="m0", data=tdat1, iter=2000,warmup = 1000, chains=1, seed = 123)
tobitstan = '
data {
int<lower=0>  N0;
int<lower=0>  N1;
vector<lower=0,upper=1>[N0] Y0;
vector<lower=0,upper=1>[N1] Y1;
vector[N0] bed0;
vector[N0] occ0;
vector[N0] alos0;
vector[N0] dnr0;
vector[N0] bnr0;
vector[N0] oir0;
vector[N0] pop0;
vector[N0] urban0;
vector[N0] HHI_beds0;
vector[N0] gdp0;
vector[N1] bed1;
vector[N1] occ1;
vector[N1] alos1;
vector[N1] dnr1;
vector[N1] bnr1;
vector[N1] oir1;
vector[N1] pop1;
vector[N1] urban1;
vector[N1] HHI_beds1;
vector[N1] gdp1;
}
parameters{
real b0;
real b1;
real b2;
real b3;
real b4;
real b5;
real b6;
real b7;
real b8;
real b9;
real b10;
real<lower=0> sigma;
}
model{
Y0 ~ normal( b0 + b1*bed0 + b2*occ0 + b3*alos0 + b4*dnr0 + b5*bnr0 + b6*oir0 + b7*pop0 + b8*urban0 + b9*HHI_beds0 + b10*gdp0, sigma);
target += normal_lccdf( Y1 | b1*bed1 + b2*occ1 + b3*alos1 + b4*dnr1 + b5*bnr1 + b6*oir1 + b7*pop1 + b8*urban1 + b9*HHI_beds1 + b10*gdp1, sigma );
//PRIORS
b0 ~ normal(0, 10);
b1 ~ normal(0, 10);
b2 ~ normal(0, 10);
b3 ~ normal(0, 10);
b4 ~ normal(0, 10);
b5 ~ normal(0, 10);
b6 ~ normal(0, 10);
b7 ~ normal(0, 10);
b8 ~ normal(0, 10);
b9 ~ normal(0, 10);
b10 ~ normal(0, 10);
sigma ~ gamma(1, 1);
}
'
rats_fit <- stan(model_code=tobitstan, model_name="m0", data=tdat1, iter=2000,warmup = 1000, chains=1, seed = 123)
rstan::summary(rats_fit)
shinystan::launch_shinystan(rats_fit)
rats_fit <- stan(model_code=tobitstan, model_name="m0", data=tdat1, iter=10000,warmup = 3000, chains=1, seed = 111)
shinystan::launch_shinystan(rats_fit)
tobitstan = '
data {
int<lower=0>  N0;
int<lower=0>  N1;
vector<lower=0,upper=1>[N0] Y0;
vector<lower=0,upper=1>[N1] Y1;
vector[N0] bed0;
vector[N0] occ0;
vector[N0] alos0;
vector[N0] dnr0;
vector[N0] bnr0;
vector[N0] oir0;
vector[N0] pop0;
vector[N0] urban0;
vector[N0] HHI_beds0;
vector[N0] gdp0;
vector[N1] bed1;
vector[N1] occ1;
vector[N1] alos1;
vector[N1] dnr1;
vector[N1] bnr1;
vector[N1] oir1;
vector[N1] pop1;
vector[N1] urban1;
vector[N1] HHI_beds1;
vector[N1] gdp1;
}
parameters{
real b0;
real b1;
real b2;
real b3;
real b4;
real b5;
real b6;
real b7;
real b8;
real b9;
real b10;
real<lower=0> sigma;
}
model{
Y0 ~ normal( b0 + b1*bed0 + b2*occ0 + b3*alos0 + b4*dnr0 + b5*bnr0 + b6*oir0 + b7*pop0 + b8*urban0 + b9*HHI_beds0 + b10*gdp0, sigma);
target += normal_lccdf( Y1 | b1*bed1 + b2*occ1 + b3*alos1 + b4*dnr1 + b5*bnr1 + b6*oir1 + b7*pop1 + b8*urban1 + b9*HHI_beds1 + b10*gdp1, sigma );
//PRIORS
b0 ~ normal(0, 1);
b1 ~ normal(0, 1);
b2 ~ normal(0, 1);
b3 ~ normal(0, 1);
b4 ~ normal(0, 1);
b5 ~ normal(0, 1);
b6 ~ normal(0, 1);
b7 ~ normal(0, 1);
b8 ~ normal(0, 1);
b9 ~ normal(0, 1);
b10 ~ normal(0, 1);
sigma ~ gamma(1, 1);
}
'
rats_fit <- stan(model_code=tobitstan, model_name="Bayesian Tobit", data=tdat1, iter=5000,warmup = 2500, chains=1, seed = 111)
fit1 = brm(bf(TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp), data = dat1, chains = 1, adapt_delta = 0.9)
rats_fit <- stan(model_code=tobitstan, model_name="Bayesian Tobit", data=tdat1, iter=5000,warmup = 2500, chains=1, seed = 111, adapt_delta = 0.9)
rats_fit <- stan(model_code=tobitstan, model_name="Bayesian Tobit", data=tdat1, iter=5000,warmup = 2500, chains=1, seed = 111, control = list(adapt_delta = 0.99))
shinystan::launch_shinystan(rats_fit)
?scale
N0 = nrow(datUN),
Y0 = datUN$TE,
bed0 = scale(datUN$bed),
occ0 = scale(datUN$occ),
alos0 = scale(datUN$alos),
dnr0 = scale(datUN$dnr),
bnr0 = scale(datUN$bnr),
oir0 = scale(datUN$oir),
pop0 = scale(datUN$pop),
urban0 = scale(datUN$urban),
HHI_beds0 = scale(datUN$HHI_beds),
gdp0 = scale(datUN$gdp),
N1 = nrow(datC)),
Y1 = datC$TE),
bed1 = scale(datC$bed),
occ1 = scale(datC$occ),
alos1 = scale(datC$alos),
dnr1 = scale(datC$dnr),
bnr1 = scale(datC$bnr),
oir1 = scale(datC$oir),
pop1 = scale(datC$pop),
urban1 = scale(datC$urban),
HHI_beds1 = scale(datC$HHI_beds),
gdp1 = scale(datC$gdp)
N0 = nrow(datUN),
Y0 = datUN$TE,
bed0 = scale(datUN$bed),
occ0 = scale(datUN$occ),
alos0 = scale(datUN$alos),
dnr0 = scale(datUN$dnr),
bnr0 = scale(datUN$bnr),
oir0 = scale(datUN$oir),
pop0 = scale(datUN$pop),
urban0 = scale(datUN$urban),
HHI_beds0 = scale(datUN$HHI_beds),
gdp0 = scale(datUN$gdp),
N1 = nrow(datC)),
Y1 = datC$TE),
bed1 = scale(datC$bed),
occ1 = scale(datC$occ),
alos1 = scale(datC$alos),
dnr1 = scale(datC$dnr),
bnr1 = scale(datC$bnr),
oir1 = scale(datC$oir),
pop1 = scale(datC$pop),
urban1 = scale(datC$urban),
HHI_beds1 = scale(datC$HHI_beds),
gdp1 = scale(datC$gdp)
tdat1 = list(
N0 = nrow(datUN),
Y0 = datUN$TE,
bed0 = scale(datUN$bed),
occ0 = scale(datUN$occ),
alos0 = scale(datUN$alos),
dnr0 = scale(datUN$dnr),
bnr0 = scale(datUN$bnr),
oir0 = scale(datUN$oir),
pop0 = scale(datUN$pop),
urban0 = scale(datUN$urban),
HHI_beds0 = scale(datUN$HHI_beds),
gdp0 = scale(datUN$gdp),
N1 = nrow(datC),
Y1 = datC$TE,
bed1 = scale(datC$bed),
occ1 = scale(datC$occ),
alos1 = scale(datC$alos),
dnr1 = scale(datC$dnr),
bnr1 = scale(datC$bnr),
oir1 = scale(datC$oir),
pop1 = scale(datC$pop),
urban1 = scale(datC$urban),
HHI_beds1 = scale(datC$HHI_beds),
gdp1 = scale(datC$gdp)
)
rats_fit <- stan(model_code=tobitstan, model_name="Bayesian Tobit", data=tdat1, iter=5000,warmup = 2500, chains=1, seed = 111, control = list(adapt_delta = 0.99))
nrow(datC)
datC$TE
scale(datC$bed)
scale1 = function(x) return((x - mean(x))/sd(x))
tdat1 = list(
N0 = nrow(datUN),
Y0 = datUN$TE,
bed0 = scale1(datUN$bed),
occ0 = scale1(datUN$occ),
alos0 = scale1(datUN$alos),
dnr0 = scale1(datUN$dnr),
bnr0 = scale1(datUN$bnr),
oir0 = scale1(datUN$oir),
pop0 = scale1(datUN$pop),
urban0 = scale1(datUN$urban),
HHI_beds0 = scale1(datUN$HHI_beds),
gdp0 = scale1(datUN$gdp),
N1 = nrow(datC),
Y1 = datC$TE,
bed1 = scale1(datC$bed),
occ1 = scale1(datC$occ),
alos1 = scale1(datC$alos),
dnr1 = scale1(datC$dnr),
bnr1 = scale1(datC$bnr),
oir1 = scale1(datC$oir),
pop1 = scale1(datC$pop),
urban1 = scale1(datC$urban),
HHI_beds1 = scale1(datC$HHI_beds),
gdp1 = scale1(datC$gdp)
)
rats_fit <- stan(model_code=tobitstan, model_name="Bayesian Tobit", data=tdat1, iter=5000,warmup = 2500, chains=1, seed = 111, control = list(adapt_delta = 0.99))
shinystan::launch_shinystan(rats_fit)
tobitstan = '
data {
int<lower=0>  N0;
int<lower=0>  N1;
vector<lower=0,upper=1>[N0] Y0;
vector<lower=0,upper=1>[N1] Y1;
vector[N0] bed0;
vector[N0] occ0;
vector[N0] alos0;
vector[N0] dnr0;
vector[N0] bnr0;
vector[N0] oir0;
vector[N0] pop0;
vector[N0] urban0;
vector[N0] HHI_beds0;
vector[N0] gdp0;
vector[N1] bed1;
vector[N1] occ1;
vector[N1] alos1;
vector[N1] dnr1;
vector[N1] bnr1;
vector[N1] oir1;
vector[N1] pop1;
vector[N1] urban1;
vector[N1] HHI_beds1;
vector[N1] gdp1;
}
parameters{
real b0;
real b1;
real b2;
real b3;
real b4;
real b5;
real b6;
real b7;
real b8;
real b9;
real b10;
real<lower=0> sigma;
}
model{
Y0 ~ normal( b0 + b1*bed0 + b2*occ0 + b3*alos0 + b4*dnr0 + b5*bnr0 + b6*oir0 + b7*pop0 + b8*urban0 + b9*HHI_beds0 + b10*gdp0, sigma);
target += normal_lccdf( Y1 | b1*bed1 + b2*occ1 + b3*alos1 + b4*dnr1 + b5*bnr1 + b6*oir1 + b7*pop1 + b8*urban1 + b9*HHI_beds1 + b10*gdp1, sigma );
//PRIORS
b0 ~ normal(0, 10);
b1 ~ normal(0, 10);
b2 ~ normal(0, 10);
b3 ~ normal(0, 10);
b4 ~ normal(0, 10);
b5 ~ normal(0, 10);
b6 ~ normal(0, 10);
b7 ~ normal(0, 10);
b8 ~ normal(0, 10);
b9 ~ normal(0, 10);
b10 ~ normal(0, 10);
sigma ~ gamma(1, 1);
}
'
rats_fit <- stan(model_code=tobitstan, model_name="Bayesian Tobit", data=tdat1, iter=5000,warmup = 2500, chains=1, seed = 111, control = list(adapt_delta = 0.99))
shinystan::launch_shinystan(rats_fit)
dat1 = dat %>%
select(TE, censoring, bed, occ, alos, dnr, bnr, oir, pop, urban, HHI_beds, gdp) %>%
mutate_all(as.numeric)
library(brms)
library(tidyverse)
dat = haven::read_dta("data/dat.dta")
dat$censoring = 0
dat$censoring[dat$TE == 1] = 1
dat1 = dat %>%
select(TE, censoring, bed, occ, alos, dnr, bnr, oir, pop, urban, HHI_beds, gdp) %>%
mutate_all(as.numeric)
str(dat1)
fit1 = brm(bf(TE|cens(censoring) ~ bed ), data = dat1, chains = 1)
fit1 = brm(bf(TE|cens(censoring) ~ bed ), data = dat1, inits = "0", chains = 1)
fit1 = brm(bf(TE|cens(censoring) ~ bed ), family = weibull, data = dat1, inits = "0", chains = 1)
fit1 = brm(bf(TE|cens(censoring) ~ bed ), family = normal, data = dat1, inits = "0", chains = 1)
fit1 = brm(bf(TE|cens(censoring) ~ bed ), family = gaussian, data = dat1, inits = "0", chains = 1)
isFALSE <-
function (x)
{
identical(FALSE, x)
}
fit1 = brm(bf(TE|cens(censoring) ~ bed ), family = gaussian, data = dat1, inits = "0", chains = 1)
fit1 = brm(bf(TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp), family = gaussian, data = dat1, inits = "0", chains = 1)
shinystan::launch_shinystan(fit1)
stancode(fit1)
fit2 = brm(TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp, family = gaussian, data = dat1, inits = "0", chains = 1)
fit2 = brm(
TE|cens(censoring) ~ bed + (1|id), family = gaussian,
data = dat1, inits = "0", chains = 1,
iter = 1000, warmup = 500)
dat1 = dat %>%
select(year, id, TE, censoring, bed, occ, alos, dnr, bnr, oir, pop, urban, HHI_beds, gdp) %>%
mutate_all(as.numeric)
fit2 = brm(
TE|cens(censoring) ~ bed + (1|id), family = gaussian,
data = dat1, inits = "0", chains = 1,
iter = 1000, warmup = 500)
stancode(fit2)
fit2 = brm(
TE|cens(censoring) ~ bed + (1|id) + (1|year), family = gaussian,
data = dat1, inits = "0", chains = 1,
iter = 1000, warmup = 500
)
shinystan::launch_shinystan(fit2)
fit2 = brm(
TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp + (1|id) + (1|year), family = gaussian,
data = dat1, inits = "0", chains = 1,
iter = 1000, warmup = 500
)
shinystan::launch_shinystan(fit2)
fit2 = brm(
TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp + (1|id) + (1|year), family = gaussian,
data = dat1, inits = "0", chains = 1,
iter = 5000, warmup = 2000
)
get_prior(TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp + (1|id) + (1|year), family = gaussian,
data = dat1)
shinystan::launch_shinystan(fit2)
summary(fit1)
coefficients(fit1)
fixef(fit1)
fixef(fit2)
summary(fit2)
class(fixef(fit2))
?fixef
# You can get a matrxi of fixef effects coefficients by:
# fixef(fit2)
coef((fit2))
# You can get a matrxi of fixef effects coefficients by:
# fixef(fit2)
z = coef((fit2))
save(fit1, file = "fit/fit1.Rdata")
qfit0 = brm(
TE|cens(censoring) ~ bed , quantile = 0.2,
family = gaussian, data = dat1,
inits = "0", seed = 666,
chains = 1, iter = 1000, warmup = 500
)
qfit0 = brm(
bf(TE|cens(censoring) ~ bed , quantile = 0.2),
family = gaussian, data = dat1,
inits = "0", seed = 666,
chains = 1, iter = 1000, warmup = 500
)
plot(hypothesis(fit2))
plot(hypothesis(fit2, "bed"))
plot(hypothesis(fit2, "bed=0"))
plot(hypothesis(fit2, "bed>0"))
hypothesis(fit2, "bed>0")
qfit0 = brm(
bf(TE|cens(censoring) ~ bed , quantile = 0.2),
family = asym_laplace(), data = dat1,
inits = "0", seed = 666,
chains = 1, iter = 1000, warmup = 500
)
summary(qfit0)
qfit0 = brm(
bf(TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp + (1|id) + (1|year), quantile = 0.2),
family = asym_laplace(), data = dat1,
inits = "0", seed = 666,
chains = 1, iter = 1000, warmup = 500
)
qfit0 = brm(
bf(TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp , quantile = 0.2),
family = asym_laplace(), data = dat1,
inits = "0", seed = 666,
chains = 1, iter = 1000, warmup = 500
)
qfit0 = brm(
bf(TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp , quantile = 0.2),
family = asym_laplace(), data = dat1,
inits = "0", seed = 666,
chains = 1, iter = 5000, warmup = 2500
)
assign(paste0("zz", i))
summary(qfit0)
shinystan::launch_shinystan(qfit0)
qfit0 = brm(
bf(TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp + (1|id) + (1|year), quantile = 0.2),
family = asym_laplace(), data = dat1,
inits = "0", seed = 666,
chains = 1, iter = 5000, warmup = 2500
)
summary(qfit0)
shinystan::launch_shinystan(qfit0)
qfit0 = brm(
bf(TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp + (1|id) + (1|year), quantile = 0.2),
family = asym_laplace(), data = dat1,
inits = "0", seed = 666, max_treedepth = 20,
chains = 1, iter = 1000, warmup = 500
)
qfit0 = brm(
bf(TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp + (1|id) + (1|year), quantile = 0.2),
family = asym_laplace(), data = dat1,
inits = "0", seed = 666, control = list(max_treedepth = 15),
chains = 1, iter = 1000, warmup = 500
)
summary(qfit0)
shinystan::launch_shinystan(qfit0)
dat = haven::read_dta("data/dat.dta")
readr::write_csv(dat, "data/dat.csv")
qfit0 = brm(
bf(TE|cens(censoring) ~ bed + occ + alos + dnr + bnr + oir + pop + urban + HHI_beds + gdp + (1|id) + (1|year), quantile = 0.2),
family = asym_laplace(), data = dat1,
inits = "0", seed = 666,
chains = 1, iter = 1000, warmup = 500
)
summary(qfit0)
fixef(qfit0)
shinystan::launch_shinystan(qfit0)
install.packages("brms")
rm(list = ls())
warnings()
load("fit/Fixed-effects Bayesian Tobit regression.Rdata")
fit = load("fit/Fixed-effects Bayesian Tobit regression.Rdata")
load("fit/Random-effects Bayesian Tobit.Rdata")
load("fit/Random-effects Bayesian Tobit.Rdata")
summary(fit2, digits = 3)
print(summary(fit2), digits = 3)
